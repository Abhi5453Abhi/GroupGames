{"ast":null,"code":"var _jsxFileName = \"/Users/abhishek/Desktop/Group Games/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Analytics } from '@vercel/analytics/react';\nimport MainMenu from './components/MainMenu';\nimport GameSetup from './components/GameSetup';\nimport PlayerOverview from './components/PlayerOverview';\nimport WordReveal from './components/WordReveal';\nimport VotingPhase from './components/VotingPhase';\nimport VotingScreen from './components/VotingScreen';\nimport ResultsScreen from './components/ResultsScreen';\nimport CategoryGameSetup from './components/CategoryGameSetup';\nimport CategoryPlay from './components/CategoryPlay';\nimport CategoryResults from './components/CategoryResults';\nimport { getRandomWordFromCategory, getHintForDifficulty } from './data/wordsByCategory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState('main-menu');\n  const [players, setPlayers] = useState([]);\n\n  // Load game config from localStorage or use defaults\n  const [gameConfig, setGameConfig] = useState(() => {\n    const saved = localStorage.getItem('imposter-game-config');\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing saved game config:', e);\n      }\n    }\n    return {\n      playerCount: 3,\n      imposterCount: 1,\n      showCategoryToImposter: false,\n      showHintToImposter: true,\n      hintDifficulty: 'medium'\n    };\n  });\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [, setSecretWord] = useState('');\n  const [gameResults, setGameResults] = useState(null);\n\n  // Category game state\n  const [categoryGameConfig, setCategoryGameConfig] = useState(null);\n  const [categoryScores, setCategoryScores] = useState({});\n\n  // Track which players have revealed their words\n  const [revealedPlayers, setRevealedPlayers] = useState(new Set());\n\n  // Store the selected word and hint for the current game\n  const [gameWord, setGameWord] = useState('');\n  const [gameHint, setGameHint] = useState('');\n\n  // Save game config to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('imposter-game-config', JSON.stringify(gameConfig));\n  }, [gameConfig]);\n  const resetGame = () => {\n    setGameState('main-menu');\n    setPlayers([]);\n    setCurrentPlayerIndex(0);\n    setSecretWord('');\n    setGameResults(null);\n    setRevealedPlayers(new Set());\n    setGameWord('');\n    setGameHint('');\n  };\n  const initializePlayersFromConfig = () => {\n    // Always read fresh player names from localStorage\n    const saved = localStorage.getItem('imposter-player-names');\n    let playerNamesFromStorage = [];\n    if (saved) {\n      try {\n        playerNamesFromStorage = JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing player names:', e);\n        playerNamesFromStorage = ['Player 1', 'Player 2', 'Player 3'];\n      }\n    } else {\n      playerNamesFromStorage = ['Player 1', 'Player 2', 'Player 3'];\n    }\n    const initialPlayers = playerNamesFromStorage.map((name, index) => ({\n      id: `player-${index}`,\n      name: name,\n      isImposter: false,\n      votes: 0\n    }));\n    setPlayers(initialPlayers);\n    return initialPlayers;\n  };\n  const startImposterGame = () => {\n    setGameState('game-setup');\n  };\n  const startWordReveal = (playerIndex = 0) => {\n    setCurrentPlayerIndex(playerIndex);\n    setGameState('word-reveal');\n  };\n  const initializeGameWords = useCallback(playersToUse => {\n    const currentPlayers = playersToUse || players;\n\n    // Check if we have players\n    if (currentPlayers.length === 0) {\n      console.error('No players available for game initialization');\n      return;\n    }\n    console.log('Initializing game words with', currentPlayers.length, 'players');\n\n    // Get words from selected categories only\n    const selectedCategories = gameConfig.selectedCategories || ['Bollywood Movies', 'Food', 'Cricket', 'Cities', 'Festivals'];\n\n    // Select a random category first\n    const shuffledCategories = [...selectedCategories].sort(() => Math.random() - 0.5);\n    const selectedCategory = shuffledCategories[0];\n\n    // Get a random word from the selected category using the shared data\n    const selectedWordData = getRandomWordFromCategory(selectedCategory);\n    if (!selectedWordData) {\n      console.error('No words found for category:', selectedCategory);\n      // Fallback to a default category\n      const fallbackData = getRandomWordFromCategory('Bollywood Movies');\n      if (!fallbackData) {\n        throw new Error('No words available in any category');\n      }\n      const selectedWord = fallbackData.word;\n      const selectedHint = getHintForDifficulty(fallbackData, gameConfig.hintDifficulty);\n\n      // Assign imposters randomly\n      const shuffledPlayers = [...currentPlayers].sort(() => Math.random() - 0.5);\n      console.log('FALLBACK - Players:', currentPlayers.length);\n      console.log('FALLBACK - Imposter count:', gameConfig.imposterCount);\n      console.log('FALLBACK - Shuffled players:', shuffledPlayers.map(p => p.name));\n      currentPlayers.forEach(player => {\n        const isImposter = shuffledPlayers.slice(0, gameConfig.imposterCount).some(p => p.id === player.id);\n        player.isImposter = isImposter;\n        player.word = isImposter ? gameConfig.showCategoryToImposter ? 'Bollywood Movies' : 'IMPOSTER' : selectedWord;\n        console.log(`FALLBACK - Player ${player.name}: isImposter=${isImposter}, word=${player.word}`);\n      });\n\n      // Store the selected word and hint for the game\n      setSecretWord(selectedWord);\n      setGameWord(selectedWord);\n      setGameHint(selectedHint);\n      return {\n        selectedWord,\n        selectedHint,\n        selectedCategory: 'Bollywood Movies'\n      };\n    }\n    const selectedWord = selectedWordData.word;\n    const selectedHint = getHintForDifficulty(selectedWordData, gameConfig.hintDifficulty);\n\n    // Assign imposters randomly\n    const shuffledPlayers = [...currentPlayers].sort(() => Math.random() - 0.5);\n    console.log('Players:', currentPlayers.length);\n    console.log('Imposter count:', gameConfig.imposterCount);\n    console.log('Shuffled players:', shuffledPlayers.map(p => p.name));\n    currentPlayers.forEach(player => {\n      const isImposter = shuffledPlayers.slice(0, gameConfig.imposterCount).some(p => p.id === player.id);\n      player.isImposter = isImposter;\n      player.word = isImposter ? gameConfig.showCategoryToImposter ? selectedCategory : 'IMPOSTER' : selectedWord;\n      console.log(`Player ${player.name}: isImposter=${isImposter}, word=${player.word}`);\n    });\n\n    // Store the selected word and hint for the game\n    setSecretWord(selectedWord);\n    setGameWord(selectedWord);\n    setGameHint(selectedHint);\n    return {\n      selectedWord,\n      selectedHint,\n      selectedCategory\n    };\n  }, [players, gameConfig]);\n  const startCategoryGame = () => {\n    setGameState('category-setup');\n  };\n  const renderCurrentScreen = () => {\n    var _players$currentPlaye;\n    switch (gameState) {\n      case 'main-menu':\n        return /*#__PURE__*/_jsxDEV(MainMenu, {\n          onStartImposter: startImposterGame,\n          onStartCategory: startCategoryGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this);\n      case 'game-setup':\n        return /*#__PURE__*/_jsxDEV(GameSetup, {\n          gameConfig: gameConfig,\n          onConfigChange: setGameConfig,\n          onStartGame: () => {\n            // Initialize players from config\n            const playersArray = initializePlayersFromConfig();\n            // Initialize game words (select word and assign imposters)\n            initializeGameWords(playersArray);\n            setGameState('player-overview');\n          },\n          onBack: () => setGameState('main-menu')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this);\n      case 'player-overview':\n        return /*#__PURE__*/_jsxDEV(PlayerOverview, {\n          players: players,\n          onPlayerClick: startWordReveal,\n          onBack: () => setGameState('game-setup'),\n          revealedPlayers: revealedPlayers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this);\n      case 'word-reveal':\n        return /*#__PURE__*/_jsxDEV(WordReveal, {\n          players: players,\n          gameConfig: gameConfig,\n          currentPlayerIndex: currentPlayerIndex,\n          onNextPlayer: index => {\n            if (index >= players.length) {\n              setGameState('voting-phase');\n            } else {\n              setCurrentPlayerIndex(index);\n            }\n          },\n          onBack: () => {\n            // Go back to player overview\n            setGameState('player-overview');\n          },\n          onStartVoting: () => {\n            setGameState('voting');\n          },\n          onPlayerRevealed: playerIndex => {\n            setRevealedPlayers(prev => new Set(prev).add(playerIndex));\n          },\n          gameWord: gameWord,\n          gameHint: gameHint\n        }, players.length > 0 ? (_players$currentPlaye = players[currentPlayerIndex]) === null || _players$currentPlaye === void 0 ? void 0 : _players$currentPlaye.id : 'word-reveal', false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this);\n      case 'voting-phase':\n        return /*#__PURE__*/_jsxDEV(VotingPhase, {\n          players: players,\n          onStartVoting: () => setGameState('voting'),\n          onBack: () => setGameState('player-overview')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this);\n      case 'voting':\n        return /*#__PURE__*/_jsxDEV(VotingScreen, {\n          players: players,\n          onVoteComplete: results => {\n            setGameResults(results);\n            setGameState('results');\n          },\n          onBack: () => {\n            // Reset game state and go back to setup\n            setPlayers([]);\n            setCurrentPlayerIndex(0);\n            setGameState('game-setup');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ResultsScreen, {\n          results: gameResults,\n          players: players,\n          onPlayAgain: resetGame,\n          onBackToMenu: resetGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this);\n      case 'category-setup':\n        return /*#__PURE__*/_jsxDEV(CategoryGameSetup, {\n          onStartGame: config => {\n            setCategoryGameConfig(config);\n            setGameState('category-play');\n          },\n          onBack: () => setGameState('main-menu')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this);\n      case 'category-play':\n        return /*#__PURE__*/_jsxDEV(CategoryPlay, {\n          prompts: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.selectedCategories) || [],\n          players: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.playerNames) || [],\n          roundsToPlay: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.roundsToPlay) || 5,\n          timePerRound: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.timePerRound) || 60,\n          isTeamMode: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.isTeamMode) || false,\n          team1: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.team1) || [],\n          team2: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.team2) || [],\n          onGameComplete: (scores, teamScores) => {\n            setCategoryScores(scores);\n            if (teamScores) {\n              // Store team scores for results screen\n              setCategoryScores.teamScores = teamScores;\n            }\n            setGameState('category-results');\n          },\n          onBack: () => setGameState('category-setup')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this);\n      case 'category-results':\n        return /*#__PURE__*/_jsxDEV(CategoryResults, {\n          scores: categoryScores,\n          onPlayAgain: () => {\n            setCategoryScores({});\n            setGameState('category-setup');\n          },\n          onBackToMenu: () => {\n            setCategoryScores({});\n            setCategoryGameConfig(null);\n            setGameState('main-menu');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(MainMenu, {\n          onStartImposter: startImposterGame,\n          onStartCategory: startCategoryGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-dark-purple text-white\",\n    children: [renderCurrentScreen(), /*#__PURE__*/_jsxDEV(Analytics, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FYZd/9TfYRVv1OIbkyb6+Ila1h4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Analytics","MainMenu","GameSetup","PlayerOverview","WordReveal","VotingPhase","VotingScreen","ResultsScreen","CategoryGameSetup","CategoryPlay","CategoryResults","getRandomWordFromCategory","getHintForDifficulty","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","players","setPlayers","gameConfig","setGameConfig","saved","localStorage","getItem","JSON","parse","e","console","error","playerCount","imposterCount","showCategoryToImposter","showHintToImposter","hintDifficulty","currentPlayerIndex","setCurrentPlayerIndex","setSecretWord","gameResults","setGameResults","categoryGameConfig","setCategoryGameConfig","categoryScores","setCategoryScores","revealedPlayers","setRevealedPlayers","Set","gameWord","setGameWord","gameHint","setGameHint","setItem","stringify","resetGame","initializePlayersFromConfig","playerNamesFromStorage","initialPlayers","map","name","index","id","isImposter","votes","startImposterGame","startWordReveal","playerIndex","initializeGameWords","playersToUse","currentPlayers","length","log","selectedCategories","shuffledCategories","sort","Math","random","selectedCategory","selectedWordData","fallbackData","Error","selectedWord","word","selectedHint","shuffledPlayers","p","forEach","player","slice","some","startCategoryGame","renderCurrentScreen","_players$currentPlaye","onStartImposter","onStartCategory","fileName","_jsxFileName","lineNumber","columnNumber","onConfigChange","onStartGame","playersArray","onBack","onPlayerClick","onNextPlayer","onStartVoting","onPlayerRevealed","prev","add","onVoteComplete","results","onPlayAgain","onBackToMenu","config","prompts","playerNames","roundsToPlay","timePerRound","isTeamMode","team1","team2","onGameComplete","scores","teamScores","className","children","_c","$RefreshReg$"],"sources":["/Users/abhishek/Desktop/Group Games/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Analytics } from '@vercel/analytics/react';\nimport MainMenu from './components/MainMenu';\nimport GameSetup from './components/GameSetup';\nimport PlayerOverview from './components/PlayerOverview';\nimport WordReveal from './components/WordReveal';\nimport VotingPhase from './components/VotingPhase';\nimport VotingScreen from './components/VotingScreen';\nimport ResultsScreen from './components/ResultsScreen';\nimport CategoryGameSetup from './components/CategoryGameSetup';\nimport CategoryPlay from './components/CategoryPlay';\nimport CategoryResults from './components/CategoryResults';\nimport { getRandomWordFromCategory, getHintForDifficulty, HintDifficulty } from './data/wordsByCategory';\n\nexport type GameState = \n  | 'main-menu'\n  | 'game-setup'\n  | 'player-overview'\n  | 'word-reveal'\n  | 'voting-phase'\n  | 'voting'\n  | 'results'\n  | 'category-setup'\n  | 'category-play'\n  | 'category-voting'\n  | 'category-results';\n\nexport interface Player {\n  id: string;\n  name: string;\n  isImposter: boolean;\n  word?: string;\n  votes: number;\n}\n\nexport interface GameConfig {\n  playerCount: number;\n  imposterCount: number;\n  showCategoryToImposter: boolean;\n  showHintToImposter: boolean;\n  hintDifficulty: HintDifficulty;\n  selectedCategories?: string[];\n  playerNames?: string[];\n}\n\nfunction App() {\n  const [gameState, setGameState] = useState<GameState>('main-menu');\n  const [players, setPlayers] = useState<Player[]>([]);\n  \n  // Load game config from localStorage or use defaults\n  const [gameConfig, setGameConfig] = useState<GameConfig>(() => {\n    const saved = localStorage.getItem('imposter-game-config');\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing saved game config:', e);\n      }\n    }\n    return {\n      playerCount: 3,\n      imposterCount: 1,\n      showCategoryToImposter: false,\n      showHintToImposter: true,\n      hintDifficulty: 'medium',\n    };\n  });\n  \n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [, setSecretWord] = useState('');\n  const [gameResults, setGameResults] = useState<{\n    winner: 'crew' | 'imposter';\n    imposterRevealed: boolean;\n    imposters: Player[];\n  } | null>(null);\n\n  // Category game state\n  const [categoryGameConfig, setCategoryGameConfig] = useState<any>(null);\n  const [categoryScores, setCategoryScores] = useState<{ [playerName: string]: number }>({});\n  \n  // Track which players have revealed their words\n  const [revealedPlayers, setRevealedPlayers] = useState<Set<number>>(new Set());\n  \n  // Store the selected word and hint for the current game\n  const [gameWord, setGameWord] = useState<string>('');\n  const [gameHint, setGameHint] = useState<string>('');\n\n  // Save game config to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('imposter-game-config', JSON.stringify(gameConfig));\n  }, [gameConfig]);\n\n  const resetGame = () => {\n    setGameState('main-menu');\n    setPlayers([]);\n    setCurrentPlayerIndex(0);\n    setSecretWord('');\n    setGameResults(null);\n    setRevealedPlayers(new Set());\n    setGameWord('');\n    setGameHint('');\n  };\n\n  const initializePlayersFromConfig = (): Player[] => {\n    // Always read fresh player names from localStorage\n    const saved = localStorage.getItem('imposter-player-names');\n    let playerNamesFromStorage: string[] = [];\n    \n    if (saved) {\n      try {\n        playerNamesFromStorage = JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing player names:', e);\n        playerNamesFromStorage = ['Player 1', 'Player 2', 'Player 3'];\n      }\n    } else {\n      playerNamesFromStorage = ['Player 1', 'Player 2', 'Player 3'];\n    }\n\n    const initialPlayers: Player[] = playerNamesFromStorage.map((name, index) => ({\n      id: `player-${index}`,\n      name: name,\n      isImposter: false,\n      votes: 0,\n    }));\n    setPlayers(initialPlayers);\n    return initialPlayers;\n  };\n\n  const startImposterGame = () => {\n    setGameState('game-setup');\n  };\n\n  const startWordReveal = (playerIndex: number = 0) => {\n    setCurrentPlayerIndex(playerIndex);\n    setGameState('word-reveal');\n  };\n\n  const initializeGameWords = useCallback((playersToUse?: Player[]) => {\n    const currentPlayers = playersToUse || players;\n    \n    // Check if we have players\n    if (currentPlayers.length === 0) {\n      console.error('No players available for game initialization');\n      return;\n    }\n    \n    console.log('Initializing game words with', currentPlayers.length, 'players');\n    \n    // Get words from selected categories only\n    const selectedCategories = gameConfig.selectedCategories || [\n      'Bollywood Movies', 'Food', 'Cricket', 'Cities', 'Festivals'\n    ];\n    \n    // Select a random category first\n    const shuffledCategories = [...selectedCategories].sort(() => Math.random() - 0.5);\n    const selectedCategory = shuffledCategories[0];\n    \n    // Get a random word from the selected category using the shared data\n    const selectedWordData = getRandomWordFromCategory(selectedCategory);\n    \n    if (!selectedWordData) {\n      console.error('No words found for category:', selectedCategory);\n      // Fallback to a default category\n      const fallbackData = getRandomWordFromCategory('Bollywood Movies');\n      if (!fallbackData) {\n        throw new Error('No words available in any category');\n      }\n      const selectedWord = fallbackData.word;\n      const selectedHint = getHintForDifficulty(fallbackData, gameConfig.hintDifficulty);\n      \n      // Assign imposters randomly\n      const shuffledPlayers = [...currentPlayers].sort(() => Math.random() - 0.5);\n      console.log('FALLBACK - Players:', currentPlayers.length);\n      console.log('FALLBACK - Imposter count:', gameConfig.imposterCount);\n      console.log('FALLBACK - Shuffled players:', shuffledPlayers.map(p => p.name));\n      \n      currentPlayers.forEach(player => {\n        const isImposter = shuffledPlayers.slice(0, gameConfig.imposterCount).some(p => p.id === player.id);\n        player.isImposter = isImposter;\n        player.word = isImposter ? (gameConfig.showCategoryToImposter ? 'Bollywood Movies' : 'IMPOSTER') : selectedWord;\n        console.log(`FALLBACK - Player ${player.name}: isImposter=${isImposter}, word=${player.word}`);\n      });\n      \n      // Store the selected word and hint for the game\n      setSecretWord(selectedWord);\n      setGameWord(selectedWord);\n      setGameHint(selectedHint);\n      \n      return { selectedWord, selectedHint, selectedCategory: 'Bollywood Movies' };\n    }\n    \n    const selectedWord = selectedWordData.word;\n    const selectedHint = getHintForDifficulty(selectedWordData, gameConfig.hintDifficulty);\n    \n    // Assign imposters randomly\n    const shuffledPlayers = [...currentPlayers].sort(() => Math.random() - 0.5);\n    console.log('Players:', currentPlayers.length);\n    console.log('Imposter count:', gameConfig.imposterCount);\n    console.log('Shuffled players:', shuffledPlayers.map(p => p.name));\n    \n    currentPlayers.forEach(player => {\n      const isImposter = shuffledPlayers.slice(0, gameConfig.imposterCount).some(p => p.id === player.id);\n      player.isImposter = isImposter;\n      player.word = isImposter ? (gameConfig.showCategoryToImposter ? selectedCategory : 'IMPOSTER') : selectedWord;\n      console.log(`Player ${player.name}: isImposter=${isImposter}, word=${player.word}`);\n    });\n    \n    // Store the selected word and hint for the game\n    setSecretWord(selectedWord);\n    setGameWord(selectedWord);\n    setGameHint(selectedHint);\n    \n    return { selectedWord, selectedHint, selectedCategory };\n  }, [players, gameConfig]);\n\n  const startCategoryGame = () => {\n    setGameState('category-setup');\n  };\n\n  const renderCurrentScreen = () => {\n    switch (gameState) {\n      case 'main-menu':\n        return (\n          <MainMenu\n            onStartImposter={startImposterGame}\n            onStartCategory={startCategoryGame}\n          />\n        );\n      case 'game-setup':\n        return (\n          <GameSetup\n            gameConfig={gameConfig}\n            onConfigChange={setGameConfig}\n            onStartGame={() => {\n              // Initialize players from config\n              const playersArray = initializePlayersFromConfig();\n              // Initialize game words (select word and assign imposters)\n              initializeGameWords(playersArray);\n              setGameState('player-overview');\n            }}\n            onBack={() => setGameState('main-menu')}\n          />\n        );\n      case 'player-overview':\n        return (\n          <PlayerOverview\n            players={players}\n            onPlayerClick={startWordReveal}\n            onBack={() => setGameState('game-setup')}\n            revealedPlayers={revealedPlayers}\n          />\n        );\n      case 'word-reveal':\n        return (\n          <WordReveal\n            key={players.length > 0 ? players[currentPlayerIndex]?.id : 'word-reveal'}\n            players={players}\n            gameConfig={gameConfig}\n            currentPlayerIndex={currentPlayerIndex}\n            onNextPlayer={(index) => {\n              if (index >= players.length) {\n                setGameState('voting-phase');\n              } else {\n                setCurrentPlayerIndex(index);\n              }\n            }}\n            onBack={() => {\n              // Go back to player overview\n              setGameState('player-overview');\n            }}\n            onStartVoting={() => {\n              setGameState('voting');\n            }}\n            onPlayerRevealed={(playerIndex) => {\n              setRevealedPlayers(prev => new Set(prev).add(playerIndex));\n            }}\n            gameWord={gameWord}\n            gameHint={gameHint}\n          />\n        );\n      case 'voting-phase':\n        return (\n          <VotingPhase\n            players={players}\n            onStartVoting={() => setGameState('voting')}\n            onBack={() => setGameState('player-overview')}\n          />\n        );\n      case 'voting':\n        return (\n          <VotingScreen\n            players={players}\n            onVoteComplete={(results) => {\n              setGameResults(results);\n              setGameState('results');\n            }}\n            onBack={() => {\n              // Reset game state and go back to setup\n              setPlayers([]);\n              setCurrentPlayerIndex(0);\n              setGameState('game-setup');\n            }}\n          />\n        );\n      case 'results':\n        return (\n          <ResultsScreen\n            results={gameResults!}\n            players={players}\n            onPlayAgain={resetGame}\n            onBackToMenu={resetGame}\n          />\n        );\n      case 'category-setup':\n        return (\n          <CategoryGameSetup\n            onStartGame={(config) => {\n              setCategoryGameConfig(config);\n              setGameState('category-play');\n            }}\n            onBack={() => setGameState('main-menu')}\n          />\n        );\n      case 'category-play':\n        return (\n          <CategoryPlay\n            prompts={categoryGameConfig?.selectedCategories || []}\n            players={categoryGameConfig?.playerNames || []}\n            roundsToPlay={categoryGameConfig?.roundsToPlay || 5}\n            timePerRound={categoryGameConfig?.timePerRound || 60}\n            isTeamMode={categoryGameConfig?.isTeamMode || false}\n            team1={categoryGameConfig?.team1 || []}\n            team2={categoryGameConfig?.team2 || []}\n            onGameComplete={(scores, teamScores) => {\n              setCategoryScores(scores);\n              if (teamScores) {\n                // Store team scores for results screen\n                (setCategoryScores as any).teamScores = teamScores;\n              }\n              setGameState('category-results');\n            }}\n            onBack={() => setGameState('category-setup')}\n          />\n        );\n      case 'category-results':\n        return (\n          <CategoryResults\n            scores={categoryScores}\n            onPlayAgain={() => {\n              setCategoryScores({});\n              setGameState('category-setup');\n            }}\n            onBackToMenu={() => {\n              setCategoryScores({});\n              setCategoryGameConfig(null);\n              setGameState('main-menu');\n            }}\n          />\n        );\n      default:\n        return <MainMenu onStartImposter={startImposterGame} onStartCategory={startCategoryGame} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-dark-purple text-white\">\n      {renderCurrentScreen()}\n      <Analytics />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}