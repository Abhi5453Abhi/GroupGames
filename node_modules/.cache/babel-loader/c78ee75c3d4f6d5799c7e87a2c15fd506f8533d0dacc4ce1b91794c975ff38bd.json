{"ast":null,"code":"var _jsxFileName = \"/Users/abhishek/Desktop/Group Games/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MainMenu from './components/MainMenu';\nimport GameSetup from './components/GameSetup';\nimport PlayerOverview from './components/PlayerOverview';\nimport WordReveal from './components/WordReveal';\nimport VotingScreen from './components/VotingScreen';\nimport ResultsScreen from './components/ResultsScreen';\nimport CategoryGameSetup from './components/CategoryGameSetup';\nimport CategoryPlay from './components/CategoryPlay';\nimport CategoryResults from './components/CategoryResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState('main-menu');\n  const [players, setPlayers] = useState([]);\n\n  // Load game config from localStorage or use defaults\n  const [gameConfig, setGameConfig] = useState(() => {\n    const saved = localStorage.getItem('imposter-game-config');\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing saved game config:', e);\n      }\n    }\n    return {\n      playerCount: 3,\n      imposterCount: 1,\n      showCategoryToImposter: false,\n      showHintToImposter: true\n    };\n  });\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [, setSecretWord] = useState('');\n  const [gameResults, setGameResults] = useState(null);\n\n  // Category game state\n  const [categoryGameConfig, setCategoryGameConfig] = useState(null);\n  const [categoryScores, setCategoryScores] = useState({});\n\n  // Track which players have revealed their words\n  const [revealedPlayers, setRevealedPlayers] = useState(new Set());\n\n  // Save game config to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('imposter-game-config', JSON.stringify(gameConfig));\n  }, [gameConfig]);\n  const resetGame = () => {\n    setGameState('main-menu');\n    setPlayers([]);\n    setCurrentPlayerIndex(0);\n    setSecretWord('');\n    setGameResults(null);\n    setRevealedPlayers(new Set());\n  };\n  const initializePlayersFromConfig = () => {\n    // Always read fresh player names from localStorage\n    const saved = localStorage.getItem('imposter-player-names');\n    let playerNamesFromStorage = [];\n    if (saved) {\n      try {\n        playerNamesFromStorage = JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing player names:', e);\n        playerNamesFromStorage = ['Player 1', 'Player 2', 'Player 3'];\n      }\n    } else {\n      playerNamesFromStorage = ['Player 1', 'Player 2', 'Player 3'];\n    }\n    const initialPlayers = playerNamesFromStorage.map((name, index) => ({\n      id: `player-${index}`,\n      name: name,\n      isImposter: false,\n      votes: 0\n    }));\n    setPlayers(initialPlayers);\n  };\n  const startImposterGame = () => {\n    setGameState('game-setup');\n  };\n  const startWordReveal = (playerIndex = 0) => {\n    setCurrentPlayerIndex(playerIndex);\n    setGameState('word-reveal');\n  };\n  const initializeGameWords = () => {\n    // Get words from selected categories only\n    const selectedCategories = gameConfig.selectedCategories || ['Bollywood Movies', 'Food', 'Cricket', 'Cities', 'Festivals'];\n\n    // Select a random category first\n    const shuffledCategories = [...selectedCategories].sort(() => Math.random() - 0.5);\n    const selectedCategory = shuffledCategories[0];\n\n    // Import the words data (we'll need to pass this from WordReveal or create a shared constant)\n    // For now, let's use a simple approach\n    const wordsByCategory = {\n      'Bollywood Movies': [{\n        word: 'Dilwale Dulhania Le Jayenge',\n        hint: 'King of Romance'\n      }, {\n        word: 'Sholay',\n        hint: 'Gabbar Singh'\n      }, {\n        word: 'Lagaan',\n        hint: 'Cricket in British India'\n      }, {\n        word: '3 Idiots',\n        hint: 'Engineering College'\n      }, {\n        word: 'Dangal',\n        hint: 'Wrestling Sisters'\n      }],\n      'Food': [{\n        word: 'Biryani',\n        hint: 'Rice with Meat'\n      }, {\n        word: 'Samosa',\n        hint: 'Triangular Snack'\n      }, {\n        word: 'Butter Chicken',\n        hint: 'Creamy Tomato Curry'\n      }, {\n        word: 'Masala Dosa',\n        hint: 'South Indian Crepe'\n      }, {\n        word: 'Rogan Josh',\n        hint: 'Red Curry'\n      }],\n      'Cricket': [{\n        word: 'Sachin Tendulkar',\n        hint: 'God of Cricket'\n      }, {\n        word: 'Virat Kohli',\n        hint: 'Run Machine'\n      }, {\n        word: 'MS Dhoni',\n        hint: 'Captain Cool'\n      }, {\n        word: 'Rohit Sharma',\n        hint: 'Hitman'\n      }, {\n        word: 'Kapil Dev',\n        hint: 'World Cup 1983'\n      }]\n    };\n\n    // Get words from that specific category\n    const categoryWords = wordsByCategory[selectedCategory] || wordsByCategory['Bollywood Movies'];\n\n    // Shuffle and select a word from the selected category\n    const shuffledWords = [...categoryWords].sort(() => Math.random() - 0.5);\n    const selectedWordData = shuffledWords[0];\n    const selectedWord = selectedWordData.word;\n    const selectedHint = selectedWordData.hint;\n\n    // Assign imposters randomly\n    const shuffledPlayers = [...players].sort(() => Math.random() - 0.5);\n    players.forEach(player => {\n      const isImposter = shuffledPlayers.slice(0, gameConfig.imposterCount).some(p => p.id === player.id);\n      player.isImposter = isImposter;\n      player.word = isImposter ? gameConfig.showCategoryToImposter ? selectedCategory : 'IMPOSTER' : selectedWord;\n    });\n\n    // Store the selected word and hint for the game\n    setSecretWord(selectedWord);\n    return {\n      selectedWord,\n      selectedHint,\n      selectedCategory\n    };\n  };\n  const startCategoryGame = () => {\n    setGameState('category-setup');\n  };\n  const renderCurrentScreen = () => {\n    var _players$currentPlaye;\n    switch (gameState) {\n      case 'main-menu':\n        return /*#__PURE__*/_jsxDEV(MainMenu, {\n          onStartImposter: startImposterGame,\n          onStartCategory: startCategoryGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this);\n      case 'game-setup':\n        return /*#__PURE__*/_jsxDEV(GameSetup, {\n          gameConfig: gameConfig,\n          onConfigChange: setGameConfig,\n          onStartGame: () => {\n            // Initialize players from config and go to player overview\n            initializePlayersFromConfig();\n            // Initialize game words (select word and assign imposters)\n            initializeGameWords();\n            setGameState('player-overview');\n          },\n          onBack: () => setGameState('main-menu')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this);\n      case 'player-overview':\n        return /*#__PURE__*/_jsxDEV(PlayerOverview, {\n          players: players,\n          onPlayerClick: startWordReveal,\n          onBack: () => setGameState('game-setup'),\n          revealedPlayers: revealedPlayers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this);\n      case 'word-reveal':\n        return /*#__PURE__*/_jsxDEV(WordReveal, {\n          players: players,\n          gameConfig: gameConfig,\n          currentPlayerIndex: currentPlayerIndex,\n          onNextPlayer: index => {\n            if (index >= players.length) {\n              setGameState('voting');\n            } else {\n              setCurrentPlayerIndex(index);\n            }\n          },\n          onBack: () => {\n            // Go back to player overview\n            setGameState('player-overview');\n          },\n          onStartVoting: () => {\n            setGameState('voting');\n          },\n          onPlayerRevealed: playerIndex => {\n            setRevealedPlayers(prev => new Set(prev).add(playerIndex));\n          }\n        }, players.length > 0 ? (_players$currentPlaye = players[currentPlayerIndex]) === null || _players$currentPlaye === void 0 ? void 0 : _players$currentPlaye.id : 'word-reveal', false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this);\n      case 'voting':\n        return /*#__PURE__*/_jsxDEV(VotingScreen, {\n          players: players,\n          onVoteComplete: results => {\n            setGameResults(results);\n            setGameState('results');\n          },\n          onBack: () => {\n            // Reset game state and go back to setup\n            setPlayers([]);\n            setCurrentPlayerIndex(0);\n            setGameState('game-setup');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ResultsScreen, {\n          results: gameResults,\n          players: players,\n          onPlayAgain: resetGame,\n          onBackToMenu: resetGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this);\n      case 'category-setup':\n        return /*#__PURE__*/_jsxDEV(CategoryGameSetup, {\n          onStartGame: config => {\n            setCategoryGameConfig(config);\n            setGameState('category-play');\n          },\n          onBack: () => setGameState('main-menu')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this);\n      case 'category-play':\n        return /*#__PURE__*/_jsxDEV(CategoryPlay, {\n          prompts: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.selectedCategories) || [],\n          players: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.playerNames) || [],\n          roundsToPlay: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.roundsToPlay) || 5,\n          timePerRound: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.timePerRound) || 60,\n          isTeamMode: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.isTeamMode) || false,\n          team1: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.team1) || [],\n          team2: (categoryGameConfig === null || categoryGameConfig === void 0 ? void 0 : categoryGameConfig.team2) || [],\n          onGameComplete: (scores, teamScores) => {\n            setCategoryScores(scores);\n            if (teamScores) {\n              // Store team scores for results screen\n              setCategoryScores.teamScores = teamScores;\n            }\n            setGameState('category-results');\n          },\n          onBack: () => setGameState('category-setup')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this);\n      case 'category-results':\n        return /*#__PURE__*/_jsxDEV(CategoryResults, {\n          scores: categoryScores,\n          onPlayAgain: () => {\n            setCategoryScores({});\n            setGameState('category-setup');\n          },\n          onBackToMenu: () => {\n            setCategoryScores({});\n            setCategoryGameConfig(null);\n            setGameState('main-menu');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(MainMenu, {\n          onStartImposter: startImposterGame,\n          onStartCategory: startCategoryGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-dark-purple text-white\",\n    children: renderCurrentScreen()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"e0YN1ZO3iOXn1lQ4HqGTRU5P7JM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MainMenu","GameSetup","PlayerOverview","WordReveal","VotingScreen","ResultsScreen","CategoryGameSetup","CategoryPlay","CategoryResults","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","players","setPlayers","gameConfig","setGameConfig","saved","localStorage","getItem","JSON","parse","e","console","error","playerCount","imposterCount","showCategoryToImposter","showHintToImposter","currentPlayerIndex","setCurrentPlayerIndex","setSecretWord","gameResults","setGameResults","categoryGameConfig","setCategoryGameConfig","categoryScores","setCategoryScores","revealedPlayers","setRevealedPlayers","Set","setItem","stringify","resetGame","initializePlayersFromConfig","playerNamesFromStorage","initialPlayers","map","name","index","id","isImposter","votes","startImposterGame","startWordReveal","playerIndex","initializeGameWords","selectedCategories","shuffledCategories","sort","Math","random","selectedCategory","wordsByCategory","word","hint","categoryWords","shuffledWords","selectedWordData","selectedWord","selectedHint","shuffledPlayers","forEach","player","slice","some","p","startCategoryGame","renderCurrentScreen","_players$currentPlaye","onStartImposter","onStartCategory","fileName","_jsxFileName","lineNumber","columnNumber","onConfigChange","onStartGame","onBack","onPlayerClick","onNextPlayer","length","onStartVoting","onPlayerRevealed","prev","add","onVoteComplete","results","onPlayAgain","onBackToMenu","config","prompts","playerNames","roundsToPlay","timePerRound","isTeamMode","team1","team2","onGameComplete","scores","teamScores","className","children","_c","$RefreshReg$"],"sources":["/Users/abhishek/Desktop/Group Games/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainMenu from './components/MainMenu';\nimport GameSetup from './components/GameSetup';\nimport PlayerOverview from './components/PlayerOverview';\nimport WordReveal from './components/WordReveal';\nimport VotingScreen from './components/VotingScreen';\nimport ResultsScreen from './components/ResultsScreen';\nimport CategoryGameSetup from './components/CategoryGameSetup';\nimport CategoryPlay from './components/CategoryPlay';\nimport CategoryResults from './components/CategoryResults';\n\nexport type GameState = \n  | 'main-menu'\n  | 'game-setup'\n  | 'player-overview'\n  | 'word-reveal'\n  | 'voting'\n  | 'results'\n  | 'category-setup'\n  | 'category-play'\n  | 'category-voting'\n  | 'category-results';\n\nexport interface Player {\n  id: string;\n  name: string;\n  isImposter: boolean;\n  word?: string;\n  votes: number;\n}\n\nexport interface GameConfig {\n  playerCount: number;\n  imposterCount: number;\n  showCategoryToImposter: boolean;\n  showHintToImposter: boolean;\n  selectedCategories?: string[];\n  playerNames?: string[];\n}\n\nfunction App() {\n  const [gameState, setGameState] = useState<GameState>('main-menu');\n  const [players, setPlayers] = useState<Player[]>([]);\n  \n  // Load game config from localStorage or use defaults\n  const [gameConfig, setGameConfig] = useState<GameConfig>(() => {\n    const saved = localStorage.getItem('imposter-game-config');\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing saved game config:', e);\n      }\n    }\n    return {\n      playerCount: 3,\n      imposterCount: 1,\n      showCategoryToImposter: false,\n      showHintToImposter: true,\n    };\n  });\n  \n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [, setSecretWord] = useState('');\n  const [gameResults, setGameResults] = useState<{\n    winner: 'crew' | 'imposter';\n    imposterRevealed: boolean;\n    imposters: Player[];\n  } | null>(null);\n\n  // Category game state\n  const [categoryGameConfig, setCategoryGameConfig] = useState<any>(null);\n  const [categoryScores, setCategoryScores] = useState<{ [playerName: string]: number }>({});\n  \n  // Track which players have revealed their words\n  const [revealedPlayers, setRevealedPlayers] = useState<Set<number>>(new Set());\n\n  // Save game config to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('imposter-game-config', JSON.stringify(gameConfig));\n  }, [gameConfig]);\n\n  const resetGame = () => {\n    setGameState('main-menu');\n    setPlayers([]);\n    setCurrentPlayerIndex(0);\n    setSecretWord('');\n    setGameResults(null);\n    setRevealedPlayers(new Set());\n  };\n\n  const initializePlayersFromConfig = () => {\n    // Always read fresh player names from localStorage\n    const saved = localStorage.getItem('imposter-player-names');\n    let playerNamesFromStorage: string[] = [];\n    \n    if (saved) {\n      try {\n        playerNamesFromStorage = JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing player names:', e);\n        playerNamesFromStorage = ['Player 1', 'Player 2', 'Player 3'];\n      }\n    } else {\n      playerNamesFromStorage = ['Player 1', 'Player 2', 'Player 3'];\n    }\n\n    const initialPlayers: Player[] = playerNamesFromStorage.map((name, index) => ({\n      id: `player-${index}`,\n      name: name,\n      isImposter: false,\n      votes: 0,\n    }));\n    setPlayers(initialPlayers);\n  };\n\n  const startImposterGame = () => {\n    setGameState('game-setup');\n  };\n\n  const startWordReveal = (playerIndex: number = 0) => {\n    setCurrentPlayerIndex(playerIndex);\n    setGameState('word-reveal');\n  };\n\n  const initializeGameWords = () => {\n    // Get words from selected categories only\n    const selectedCategories = gameConfig.selectedCategories || [\n      'Bollywood Movies', 'Food', 'Cricket', 'Cities', 'Festivals'\n    ];\n    \n    // Select a random category first\n    const shuffledCategories = [...selectedCategories].sort(() => Math.random() - 0.5);\n    const selectedCategory = shuffledCategories[0];\n    \n    // Import the words data (we'll need to pass this from WordReveal or create a shared constant)\n    // For now, let's use a simple approach\n    const wordsByCategory: { [key: string]: { word: string; hint: string }[] } = {\n      'Bollywood Movies': [\n        { word: 'Dilwale Dulhania Le Jayenge', hint: 'King of Romance' },\n        { word: 'Sholay', hint: 'Gabbar Singh' },\n        { word: 'Lagaan', hint: 'Cricket in British India' },\n        { word: '3 Idiots', hint: 'Engineering College' },\n        { word: 'Dangal', hint: 'Wrestling Sisters' }\n      ],\n      'Food': [\n        { word: 'Biryani', hint: 'Rice with Meat' },\n        { word: 'Samosa', hint: 'Triangular Snack' },\n        { word: 'Butter Chicken', hint: 'Creamy Tomato Curry' },\n        { word: 'Masala Dosa', hint: 'South Indian Crepe' },\n        { word: 'Rogan Josh', hint: 'Red Curry' }\n      ],\n      'Cricket': [\n        { word: 'Sachin Tendulkar', hint: 'God of Cricket' },\n        { word: 'Virat Kohli', hint: 'Run Machine' },\n        { word: 'MS Dhoni', hint: 'Captain Cool' },\n        { word: 'Rohit Sharma', hint: 'Hitman' },\n        { word: 'Kapil Dev', hint: 'World Cup 1983' }\n      ]\n    };\n    \n    // Get words from that specific category\n    const categoryWords = wordsByCategory[selectedCategory] || wordsByCategory['Bollywood Movies'];\n    \n    // Shuffle and select a word from the selected category\n    const shuffledWords = [...categoryWords].sort(() => Math.random() - 0.5);\n    const selectedWordData = shuffledWords[0];\n    \n    const selectedWord = selectedWordData.word;\n    const selectedHint = selectedWordData.hint;\n    \n    // Assign imposters randomly\n    const shuffledPlayers = [...players].sort(() => Math.random() - 0.5);\n    players.forEach(player => {\n      const isImposter = shuffledPlayers.slice(0, gameConfig.imposterCount).some(p => p.id === player.id);\n      player.isImposter = isImposter;\n      player.word = isImposter ? (gameConfig.showCategoryToImposter ? selectedCategory : 'IMPOSTER') : selectedWord;\n    });\n    \n    // Store the selected word and hint for the game\n    setSecretWord(selectedWord);\n    \n    return { selectedWord, selectedHint, selectedCategory };\n  };\n\n  const startCategoryGame = () => {\n    setGameState('category-setup');\n  };\n\n  const renderCurrentScreen = () => {\n    switch (gameState) {\n      case 'main-menu':\n        return (\n          <MainMenu\n            onStartImposter={startImposterGame}\n            onStartCategory={startCategoryGame}\n          />\n        );\n      case 'game-setup':\n        return (\n          <GameSetup\n            gameConfig={gameConfig}\n            onConfigChange={setGameConfig}\n            onStartGame={() => {\n              // Initialize players from config and go to player overview\n              initializePlayersFromConfig();\n              // Initialize game words (select word and assign imposters)\n              initializeGameWords();\n              setGameState('player-overview');\n            }}\n            onBack={() => setGameState('main-menu')}\n          />\n        );\n      case 'player-overview':\n        return (\n          <PlayerOverview\n            players={players}\n            onPlayerClick={startWordReveal}\n            onBack={() => setGameState('game-setup')}\n            revealedPlayers={revealedPlayers}\n          />\n        );\n      case 'word-reveal':\n        return (\n          <WordReveal\n            key={players.length > 0 ? players[currentPlayerIndex]?.id : 'word-reveal'}\n            players={players}\n            gameConfig={gameConfig}\n            currentPlayerIndex={currentPlayerIndex}\n            onNextPlayer={(index) => {\n              if (index >= players.length) {\n                setGameState('voting');\n              } else {\n                setCurrentPlayerIndex(index);\n              }\n            }}\n            onBack={() => {\n              // Go back to player overview\n              setGameState('player-overview');\n            }}\n            onStartVoting={() => {\n              setGameState('voting');\n            }}\n            onPlayerRevealed={(playerIndex) => {\n              setRevealedPlayers(prev => new Set(prev).add(playerIndex));\n            }}\n          />\n        );\n      case 'voting':\n        return (\n          <VotingScreen\n            players={players}\n            onVoteComplete={(results) => {\n              setGameResults(results);\n              setGameState('results');\n            }}\n            onBack={() => {\n              // Reset game state and go back to setup\n              setPlayers([]);\n              setCurrentPlayerIndex(0);\n              setGameState('game-setup');\n            }}\n          />\n        );\n      case 'results':\n        return (\n          <ResultsScreen\n            results={gameResults!}\n            players={players}\n            onPlayAgain={resetGame}\n            onBackToMenu={resetGame}\n          />\n        );\n      case 'category-setup':\n        return (\n          <CategoryGameSetup\n            onStartGame={(config) => {\n              setCategoryGameConfig(config);\n              setGameState('category-play');\n            }}\n            onBack={() => setGameState('main-menu')}\n          />\n        );\n      case 'category-play':\n        return (\n          <CategoryPlay\n            prompts={categoryGameConfig?.selectedCategories || []}\n            players={categoryGameConfig?.playerNames || []}\n            roundsToPlay={categoryGameConfig?.roundsToPlay || 5}\n            timePerRound={categoryGameConfig?.timePerRound || 60}\n            isTeamMode={categoryGameConfig?.isTeamMode || false}\n            team1={categoryGameConfig?.team1 || []}\n            team2={categoryGameConfig?.team2 || []}\n            onGameComplete={(scores, teamScores) => {\n              setCategoryScores(scores);\n              if (teamScores) {\n                // Store team scores for results screen\n                (setCategoryScores as any).teamScores = teamScores;\n              }\n              setGameState('category-results');\n            }}\n            onBack={() => setGameState('category-setup')}\n          />\n        );\n      case 'category-results':\n        return (\n          <CategoryResults\n            scores={categoryScores}\n            onPlayAgain={() => {\n              setCategoryScores({});\n              setGameState('category-setup');\n            }}\n            onBackToMenu={() => {\n              setCategoryScores({});\n              setCategoryGameConfig(null);\n              setGameState('main-menu');\n            }}\n          />\n        );\n      default:\n        return <MainMenu onStartImposter={startImposterGame} onStartCategory={startCategoryGame} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-dark-purple text-white\">\n      {renderCurrentScreen()}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}