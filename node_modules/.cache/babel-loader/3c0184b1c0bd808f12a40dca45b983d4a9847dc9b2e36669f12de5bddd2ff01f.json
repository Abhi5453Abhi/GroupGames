{"ast":null,"code":"var _jsxFileName = \"/Users/abhishek/Desktop/Group Games/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MainMenu from './components/MainMenu';\nimport GameSetup from './components/GameSetup';\nimport WordReveal from './components/WordReveal';\nimport VotingScreen from './components/VotingScreen';\nimport ResultsScreen from './components/ResultsScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState('main-menu');\n  const [players, setPlayers] = useState([]);\n\n  // Load game config from localStorage or use defaults\n  const [gameConfig, setGameConfig] = useState(() => {\n    const saved = localStorage.getItem('imposter-game-config');\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing saved game config:', e);\n      }\n    }\n    return {\n      playerCount: 3,\n      imposterCount: 1,\n      showCategoryToImposter: false,\n      showHintToImposter: true\n    };\n  });\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [, setSecretWord] = useState('');\n  const [gameResults, setGameResults] = useState(null);\n\n  // Save game config to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('imposter-game-config', JSON.stringify(gameConfig));\n  }, [gameConfig]);\n  const resetGame = () => {\n    setGameState('main-menu');\n    setPlayers([]);\n    setCurrentPlayerIndex(0);\n    setSecretWord('');\n    setGameResults(null);\n  };\n  const initializePlayersFromConfig = () => {\n    if (gameConfig.playerNames) {\n      const initialPlayers = gameConfig.playerNames.map((name, index) => ({\n        id: `player-${index}`,\n        name: name,\n        isImposter: false,\n        votes: 0\n      }));\n      setPlayers(initialPlayers);\n    }\n  };\n  const startImposterGame = () => {\n    setGameState('game-setup');\n  };\n  const startCategoryGame = () => {\n    setGameState('category-setup');\n  };\n  const renderCurrentScreen = () => {\n    switch (gameState) {\n      case 'main-menu':\n        return /*#__PURE__*/_jsxDEV(MainMenu, {\n          onStartImposter: startImposterGame,\n          onStartCategory: startCategoryGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this);\n      case 'game-setup':\n        return /*#__PURE__*/_jsxDEV(GameSetup, {\n          gameConfig: gameConfig,\n          onConfigChange: setGameConfig,\n          onStartGame: () => {\n            // Initialize players from config and go directly to word reveal\n            initializePlayersFromConfig();\n            setGameState('word-reveal');\n          },\n          onBack: () => setGameState('main-menu')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this);\n      case 'word-reveal':\n        return /*#__PURE__*/_jsxDEV(WordReveal, {\n          players: players,\n          gameConfig: gameConfig,\n          currentPlayerIndex: currentPlayerIndex,\n          onNextPlayer: index => {\n            if (index >= players.length) {\n              setGameState('voting');\n            } else {\n              setCurrentPlayerIndex(index);\n            }\n          },\n          onBack: () => {\n            // Reset game state when going back\n            setPlayers([]);\n            setCurrentPlayerIndex(0);\n            setGameState('game-setup');\n          }\n        }, players.length > 0 ? players[0].id : 'word-reveal', false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this);\n      case 'voting':\n        return /*#__PURE__*/_jsxDEV(VotingScreen, {\n          players: players,\n          onVoteComplete: results => {\n            setGameResults(results);\n            setGameState('results');\n          },\n          onBack: () => setGameState('word-reveal')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ResultsScreen, {\n          results: gameResults,\n          players: players,\n          onPlayAgain: resetGame,\n          onBackToMenu: resetGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(MainMenu, {\n          onStartImposter: startImposterGame,\n          onStartCategory: startCategoryGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-dark-purple text-white\",\n    children: renderCurrentScreen()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hNKiq39kgLKQRZiM93cW2HZxZRg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MainMenu","GameSetup","WordReveal","VotingScreen","ResultsScreen","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","players","setPlayers","gameConfig","setGameConfig","saved","localStorage","getItem","JSON","parse","e","console","error","playerCount","imposterCount","showCategoryToImposter","showHintToImposter","currentPlayerIndex","setCurrentPlayerIndex","setSecretWord","gameResults","setGameResults","setItem","stringify","resetGame","initializePlayersFromConfig","playerNames","initialPlayers","map","name","index","id","isImposter","votes","startImposterGame","startCategoryGame","renderCurrentScreen","onStartImposter","onStartCategory","fileName","_jsxFileName","lineNumber","columnNumber","onConfigChange","onStartGame","onBack","onNextPlayer","length","onVoteComplete","results","onPlayAgain","onBackToMenu","className","children","_c","$RefreshReg$"],"sources":["/Users/abhishek/Desktop/Group Games/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainMenu from './components/MainMenu';\nimport GameSetup from './components/GameSetup';\nimport WordReveal from './components/WordReveal';\nimport VotingScreen from './components/VotingScreen';\nimport ResultsScreen from './components/ResultsScreen';\nimport CategoryGameSetup from './components/CategoryGameSetup';\n\nexport type GameState = \n  | 'main-menu'\n  | 'game-setup'\n  | 'word-reveal'\n  | 'voting'\n  | 'results'\n  | 'category-setup'\n  | 'category-play'\n  | 'category-voting'\n  | 'category-results';\n\nexport interface Player {\n  id: string;\n  name: string;\n  isImposter: boolean;\n  word?: string;\n  votes: number;\n}\n\nexport interface GameConfig {\n  playerCount: number;\n  imposterCount: number;\n  showCategoryToImposter: boolean;\n  showHintToImposter: boolean;\n  selectedCategories?: string[];\n  playerNames?: string[];\n}\n\nfunction App() {\n  const [gameState, setGameState] = useState<GameState>('main-menu');\n  const [players, setPlayers] = useState<Player[]>([]);\n  \n  // Load game config from localStorage or use defaults\n  const [gameConfig, setGameConfig] = useState<GameConfig>(() => {\n    const saved = localStorage.getItem('imposter-game-config');\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch (e) {\n        console.error('Error parsing saved game config:', e);\n      }\n    }\n    return {\n      playerCount: 3,\n      imposterCount: 1,\n      showCategoryToImposter: false,\n      showHintToImposter: true,\n    };\n  });\n  \n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [, setSecretWord] = useState('');\n  const [gameResults, setGameResults] = useState<{\n    winner: 'crew' | 'imposter';\n    imposterRevealed: boolean;\n    imposters: Player[];\n  } | null>(null);\n\n  // Save game config to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('imposter-game-config', JSON.stringify(gameConfig));\n  }, [gameConfig]);\n\n  const resetGame = () => {\n    setGameState('main-menu');\n    setPlayers([]);\n    setCurrentPlayerIndex(0);\n    setSecretWord('');\n    setGameResults(null);\n  };\n\n  const initializePlayersFromConfig = () => {\n    if (gameConfig.playerNames) {\n      const initialPlayers: Player[] = gameConfig.playerNames.map((name, index) => ({\n        id: `player-${index}`,\n        name: name,\n        isImposter: false,\n        votes: 0,\n      }));\n      setPlayers(initialPlayers);\n    }\n  };\n\n  const startImposterGame = () => {\n    setGameState('game-setup');\n  };\n\n  const startCategoryGame = () => {\n    setGameState('category-setup');\n  };\n\n  const renderCurrentScreen = () => {\n    switch (gameState) {\n      case 'main-menu':\n        return (\n          <MainMenu\n            onStartImposter={startImposterGame}\n            onStartCategory={startCategoryGame}\n          />\n        );\n      case 'game-setup':\n        return (\n          <GameSetup\n            gameConfig={gameConfig}\n            onConfigChange={setGameConfig}\n            onStartGame={() => {\n              // Initialize players from config and go directly to word reveal\n              initializePlayersFromConfig();\n              setGameState('word-reveal');\n            }}\n            onBack={() => setGameState('main-menu')}\n          />\n        );\n      case 'word-reveal':\n        return (\n          <WordReveal\n            key={players.length > 0 ? players[0].id : 'word-reveal'}\n            players={players}\n            gameConfig={gameConfig}\n            currentPlayerIndex={currentPlayerIndex}\n            onNextPlayer={(index) => {\n              if (index >= players.length) {\n                setGameState('voting');\n              } else {\n                setCurrentPlayerIndex(index);\n              }\n            }}\n            onBack={() => {\n              // Reset game state when going back\n              setPlayers([]);\n              setCurrentPlayerIndex(0);\n              setGameState('game-setup');\n            }}\n          />\n        );\n      case 'voting':\n        return (\n          <VotingScreen\n            players={players}\n            onVoteComplete={(results) => {\n              setGameResults(results);\n              setGameState('results');\n            }}\n            onBack={() => setGameState('word-reveal')}\n          />\n        );\n      case 'results':\n        return (\n          <ResultsScreen\n            results={gameResults!}\n            players={players}\n            onPlayAgain={resetGame}\n            onBackToMenu={resetGame}\n          />\n        );\n      default:\n        return <MainMenu onStartImposter={startImposterGame} onStartCategory={startCategoryGame} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-dark-purple text-white\">\n      {renderCurrentScreen()}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}